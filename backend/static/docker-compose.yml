version: '3.8'

services:
  backend:
    build:
      context: . # Dockerfile이 있는 현재 디렉토리
      dockerfile: Dockerfile
    ports:
      - "8000:8000" # 호스트의 8000번 포트를 컨테이너의 8000번 포트와 연결
    env_file:
      - .env # .env 파일의 환경 변수를 컨테이너 내부로 전달
    volumes:
      - .:/app # 코드 변경 시 자동 리로드를 위해 현재 디렉토리를 컨테이너 /app에 마운트 (개발용)
               # 프로덕션에서는 이 볼륨 마운트를 제거하고 이미지에 코드를 COPY하는 것이 좋음
      - ./data:/app/data # food_db.json을 읽기 위해 data 폴더 마운트
    depends_on:
      db: # db 서비스가 시작된 후에 backend 서비스 시작
        condition: service_healthy 
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload # 개발 시 --reload 옵션 사용

  db:
    image: mysql:8.0 # MySQL 8.0 이미지 사용
    ports:
      - "${MYSQL_PORT:-3306}:3306" # .env의 MYSQL_PORT 또는 기본 3306을 호스트와 연결
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-supersecretpassword} # 루트 비밀번호 (프로덕션에서는 변경!)
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql # MySQL 데이터 영구 저장을 위한 볼륨
      # 필요시 초기 스키마/데이터 로드를 위한 .sql 파일 마운트 가능
      # - ./init.sql:/docker-entrypoint-initdb.d/init.sql 
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u$${MYSQL_USER}", "-p$${MYSQL_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mysql_data: # 명명된 볼륨 정의 